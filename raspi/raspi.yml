- hosts: localhost
  become: yes
  user: pi
  vars_files:
    - settings.yml
  tasks:
    # Setting sudo
    - name: Add wheel group
      group:
        name: wheel
    - name: Allow wheel group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'
    # Setting user
    - name: Add user
      user:
        name: '{{sshd_user}}'
        groups: wheel
        shell: /bin/bash
    - name: Mkdir .ssh
      file:
        dest: '/home/{{sshd_user}}/.ssh/'
        state: directory
        owner: '{{sshd_user}}'
        group: '{{sshd_user}}'
        mode: 0700 
    - name: Create authorized keys
      file:
        dest: '/home/{{sshd_user}}/.ssh/authorized_keys'
        state: touch
        owner: '{{sshd_user}}'
        group: '{{sshd_user}}'
        mode: 0600
    - name: Copy public key
      copy:
        dest: '/home/{{sshd_user}}/.ssh/authorized_keys'
        content: '{{sshd_public_key}}'
    - name: Disable pi user
      user:
        name: pi
        expires: -1
    # Setting SSH
    - name: Setting SSH
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '{{item.regexp}}'
        insertafter: '{{item.insertafter}}'
        line: '{{item.line}}'
        backup: true
      with_items:
          - { regexp: '^RhostsRSAAuthentication', insertafter: '^#RhostsRSAAuthentication', line: 'RhostsRSAAuthentication no' }
          - { regexp: '^HostbasedAuthentication', insertafter: '^#HostbasedAuthentication', line: 'HostbasedAuthentication no' }
          - { regexp: '^IgnoreRhosts', insertafter: '^#IgnoreRhosts', line: 'IgnoreRhosts yes' }
          - { regexp: '^PubkeyAuthentication', insertafter: '^#PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
          - { regexp: '^AuthorizedKeysFile', insertafter: '^#AuthorizedKeysFile', line: 'AuthorizedKeysFile .ssh/authorized_keys' }
          - { regexp: '^PasswordAuthentication', insertafter: '^#PasswordAuthentication', line: 'PasswordAuthentication no' }
          - { regexp: '^PermitEmptyPasswords', insertafter: '^#PermitEmptyPasswords', line: 'PermitEmptyPasswords no' }
          - { regexp: '^ChallengeResponseAuthentication', insertafter: '^#ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no' }
          - { regexp: '^PermitRootLogin', insertafter: '^#PermitRootLogin', line: 'PermitRootLogin no' }
          - { regexp: '^Port', insertafter: '^#Port', line: 'Port {{sshd_port}}' }
          - { regexp: '^AllowUsers', insertafter: '^#AllowUsers', line: 'AllowUsers {{sshd_user}}' }
          - { regexp: '^Protocol', insertafter: '^#Protocol', line: 'Protocol 2' }
    - name: Restart SSHd
      service:
        name: ssh
        state: restarted
    # Setting NTP
    - name: Install NTP
      apt: name=ntp update_cache=yes
    - name: Setting NTP (1/2)
      replace:
        dest: /etc/ntp.conf
        regexp: '^pool'
        replace: '#pool'
        backup: true
    - name: Setting NTP (2/2)
      lineinfile:
        dest: /etc/ntp.conf
        insertafter: '^#pool'
        line: '{{item}}'
        backup: true
      with_items:
        - 'server ntp2.ring.gr.jp'
        - 'server ntp1.ring.gr.jp'
        - 'server ntp0.ring.gr.jp'
    - name: Restart NTPd
      service:
        name: ntp
        state: restarted
    # Install Softwares
    - name: Install Softwares
      apt: name={{item}} update_cache=yes
      with_items:
        - git
        - git-flow
        - tig
        - tmux
        - vim
        - lvm2
        - exfat-fuse
        - exfat-utils
        - ufw
        - zip
        - p7zip-full
        - parted
        - curl
    # Setting git
    - name: Copy git config
      template:
        src: 'gitconfig'
        dest: '/home/{{sshd_user}}/.gitconfig'
        owner: '{{sshd_user}}'
        group: '{{sshd_user}}'
    - name: Setting git config
      lineinfile:
        dest: '/home/{{sshd_user}}/.gitconfig'
        insertafter: '^\[user\]&'
        line: '{{item}}'
      with_items:
        - '  name = {{git_user_name}}'
        - '  email = {{git_user_email}}'
    # Setup Minio
    - name: Create Minio directory
      file:
        path: /opt/minio
        state: directory
    - name: Create Minio data directory
      file:
        path: /mnt/data/minio/data
        state: directory
    - name: Create Minio config directory
      file:
        path: /mnt/data/minio/config
        state: directory
    - name: Download Minio binary
      get_url:
        url: https://dl.minio.io/server/minio/release/linux-arm/minio
        dest: /opt/minio/
        mode: u+x
    - name: Create Systemd minio service file
      copy:
        dest: /etc/systemd/system/minio.service
        content: |
          [Unit]
          Description=Minio service
          After=network.target

          [Service]
          Type=simple
          ExecStart=/opt/minio/minio server --config-dir /mnt/data/minio/config /mnt/data/minio/data
          Restart=on-abort
          WorkingDirectory=/opt/minio

          [Install]
          WantedBy=multi-user.target
    - name: Enable minio service
      systemd:
        name: minio
        daemon_reload: yes
        enabled: yes
        state: restarted
    # Setup nginx reverse proxy
    - name: Install nginx
      apt: name=nginx update_cache=true
      ignore_errors: yes
    - name: Modify nginx config
      lineinfile:
        dest: /etc/nginx/sites-available/default
        regexp: 'listen \[::\]:80 default_server;'
        line: '#listen [::]:80 default_server;'
        backup: yes
    - name: Create minio reverse proxy config in nginx sites-enabled
      copy:
        dest: /etc/nginx/sites-enabled/minio
        content: |
          server {
            listen 80;
            server_name s3.u6k.me;
            location ^~ /.well-known/acme-challenge/ {
              default_type "text/plain";
              root /var/www/s3.u6k.me/;
            }
            location / {
              return 301 https://$host$request_uri;
            }
          }
          server {
            listen 80;
            server_name "~^s3\.(\d+\.){4}xip\.io$";
            ignore_invalid_headers off;
            client_max_body_size 0;
            proxy_buffering off;
            location / {
              proxy_set_header Host $http_host;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_pass http://localhost:9000;
            }
          }
          #server {
          #  listen 443 ssl;
          #  server_name s3.u6k.me;
          #  ssl_certificate /etc/letsencrypt/live/s3.u6k.me/fullchain.pem;
          #  ssl_certificate_key /etc/letsencrypt/live/s3.u6k.me/privkey.pem;
          #  ssl_prefer_server_ciphers on;
          #  ssl_ciphers 'ECDH !aNULL !eNULL !SSLv2 !SSLv3';
          #  add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";  ignore_invalid_headers off;
          #  client_max_body_size 0;
          #  proxy_buffering off;
          #  location / {
          #    proxy_set_header Host $http_host;
          #    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          #    proxy_pass http://localhost:9000;
          #  }
          #}
    - name: Restart nginx service
      service:
        name: nginx
        state: restarted
    # Setup certbot
    - name: Clone certbot
      git:
        repo: "https://github.com/certbot/certbot"
        dest: /usr/local/src/certbot/
    - name: Create certbot-auto link
      file:
        src: /usr/local/src/certbot/certbot-auto
        dest: /usr/local/bin/certbot-auto
        state: link
    - name: Resolve certbot dependency packages
      shell: certbot -v -n
