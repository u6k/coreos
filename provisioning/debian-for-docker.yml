- hosts: localhost
  become: yes
  vars_files:
    - settings.yml
  tasks:
    # Setting sudo
    - name: Add Wheel group
      group:
        name: wheel
    - name: Allow wheel group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'
    # Setting User
    - name: Add User
      user:
        name: '{{sshd_user}}'
        groups: wheel
        shell: /bin/bash
    - name: mkdir .ssh
      file:
        dest: '/home/{{sshd_user}}/.ssh/'
        state: directory
        owner: '{{sshd_user}}'
        group: '{{sshd_user}}'
        mode: 0700 
    - name: Create authorized keys
      file:
        dest: '/home/{{sshd_user}}/.ssh/authorized_keys'
        state: touch
        owner: '{{sshd_user}}'
        group: '{{sshd_user}}'
        mode: 0600
    - name: Copy public key
      copy:
        dest: '/home/{{sshd_user}}/.ssh/authorized_keys'
        content: '{{sshd_public_key}}'
    # Setting SSH
    - name: Setting SSH
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '{{item.regexp}}'
        insertafter: '{{item.insertafter}}'
        line: '{{item.line}}'
        backup: true
      with_items:
          - { regexp: '^RhostsRSAAuthentication', insertafter: '^#RhostsRSAAuthentication', line: 'RhostsRSAAuthentication no' }
          - { regexp: '^HostbasedAuthentication', insertafter: '^#HostbasedAuthentication', line: 'HostbasedAuthentication no' }
          - { regexp: '^IgnoreRhosts', insertafter: '^#IgnoreRhosts', line: 'IgnoreRhosts yes' }
          - { regexp: '^PubkeyAuthentication', insertafter: '^#PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
          - { regexp: '^AuthorizedKeysFile', insertafter: '^#AuthorizedKeysFile', line: 'AuthorizedKeysFile .ssh/authorized_keys' }
          - { regexp: '^PasswordAuthentication', insertafter: '^#PasswordAuthentication', line: 'PasswordAuthentication no' }
          - { regexp: '^PermitEmptyPasswords', insertafter: '^#PermitEmptyPasswords', line: 'PermitEmptyPasswords no' }
          - { regexp: '^ChallengeResponseAuthentication', insertafter: '^#ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no' }
          - { regexp: '^PermitRootLogin', insertafter: '^#PermitRootLogin', line: 'PermitRootLogin no' }
          - { regexp: '^Port', insertafter: '^#Port', line: 'Port {{sshd_port}}' }
          - { regexp: '^AllowUsers', insertafter: '^#AllowUsers', line: 'AllowUsers {{sshd_user}}' }
          - { regexp: '^Protocol', insertafter: '^#Protocol', line: 'Protocol 2' }
    - name: Restart SSHd
      service:
        name: ssh
        state: restarted
    # Setting Timezone
    - name: Setting Timezone
      timezone:
        name: Asia/Tokyo
    # Setting NTP
    - name: Purge ntp
      apt:
        name: ntp
        purge: true
        state: absent
    - name: Setting timesyncd
      lineinfile:
        dest: /etc/systemd/timesyncd.conf
        line: 'NTP=ntp.ring.gr.jp'
    - name: Restart timesyncd
      service:
        name: systemd-timesyncd.service
        state: restarted
    # Install Docker CE
    - name: PreInstall Docker (1/4)
      apt: name={{item}} update_cache=yes
      with_items:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg2
        - software-properties-common
    - name: PreInstall Docker (2/4)
      shell: curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
    - name: PreInstall Docker (3/4)
      shell: apt-key fingerprint 0EBFCD88
    - name: PreInstall Docker (4/4)
      shell: add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
    # Install Softwares
    - name: Install Softwares
      apt: name={{item}} update_cache=yes
      with_items:
        - docker-ce
        - git
        - git-flow
        - tig
        - tmux
        - ufw
        - vim
        - zip
        - p7zip-full
        - parted
        - lvm2
    # Setting git
    - name: Copy git config
      template:
        src: 'gitconfig'
        dest: '/home/{{sshd_user}}/.gitconfig'
        owner: '{{sshd_user}}'
        group: '{{sshd_user}}'
    - name: Setting git config
      lineinfile:
        dest: '/home/{{sshd_user}}/.gitconfig'
        insertafter: '^\[user\]$'
        line: '{{item}}'
      with_items:
        - '  name = {{git_user_name}}'
        - '  email = {{git_user_email}}'
    # Install docker-compose
    - name: Install docker-compose (1/2)
      shell: curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
    - name: Install docker-compose (2/2)
      shell: chmod +x /usr/local/bin/docker-compose
    # Setting Firewall
    - name: Setting ufw
      ufw:
        state: enabled
        policy: deny
        rule: allow
        port: '{{item}}'
      with_items:
        - 80
        - 443
        - '{{sshd_port}}'
    # Setting vim
    - name: Copy vimrc
      template:
        src: 'vimrc'
        dest: '/home/{{sshd_user}}/.vimrc'
#    - name: Download NeoBundle Installer
#      get_url:
#        url: https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh
#        dest: /tmp/neobundle-installer.sh
#        owner: '{{sshd_user}}'
#        group: '{{sshd_user}}'
#        mode: 0744
#    - name: Install NeoBundle
#      command: /tmp/neobundle-installer.sh
#      become_user: '{{sshd_user}}'
