- hosts: vagrants
  sudo: true
  user: vagrant
  vars_files:
    - settings.yml
  tasks:
    # Setting sudo
    - name: Add Wheel group
      group:
        name: wheel
    - name: Allow wheel group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'
    # Setting User
    - name: Add User
      user:
        name: '{{sshd_user}}'
        groups: wheel
    - name: mkdir .ssh
      file:
        dest: '/home/{{sshd_user}}/.ssh/'
        state: directory
        owner: '{{sshd_user}}'
        group: '{{sshd_user}}'
        mode: 0700 
    - name: Create authorized keys
      file:
        dest: '/home/{{sshd_user}}/.ssh/authorized_keys'
        state: touch
        owner: '{{sshd_user}}'
        group: '{{sshd_user}}'
        mode: 0600
    - name: Copy public key
      template:
        src: 'id_rsa.pub'
        dest: '/home/{{sshd_user}}/.ssh/authorized_keys'
    # Setting SSH
    - name: Setting SSH
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '{{item.regexp}}'
        insertafter: '{{item.insertafter}}'
        line: '{{item.line}}'
        backup: true
      with_items:
          - { regexp: '^RhostsRSAAuthentication', insertafter: '^#RhostsRSAAuthentication', line: 'RhostsRSAAuthentication no' }
          - { regexp: '^HostbasedAuthentication', insertafter: '^#HostbasedAuthentication', line: 'HostbasedAuthentication no' }
          - { regexp: '^IgnoreRhosts', insertafter: '^#IgnoreRhosts', line: 'IgnoreRhosts yes' }
          - { regexp: '^PubkeyAuthentication', insertafter: '^#PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
          - { regexp: '^AuthorizedKeysFile', insertafter: '^#AuthorizedKeysFile', line: 'AuthorizedKeysFile .ssh/authorized_keys' }
          - { regexp: '^PasswordAuthentication', insertafter: '^#PasswordAuthentication', line: 'PasswordAuthentication no' }
          - { regexp: '^PermitEmptyPasswords', insertafter: '^#PermitEmptyPasswords', line: 'PermitEmptyPasswords no' }
          - { regexp: '^ChallengeResponseAuthentication', insertafter: '^#ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no' }
          - { regexp: '^PermitRootLogin', insertafter: '^#PermitRootLogin', line: 'PermitRootLogin no' }
          - { regexp: '^Port', insertafter: '^#Port', line: 'Port {{sshd_port}}' }
          - { regexp: '^AllowUsers', insertafter: '^#AllowUsers', line: 'AllowUsers {{sshd_user}}' }
          - { regexp: '^Protocol', insertafter: '^#Protocol', line: 'Protocol 2' }
    - name: Restart SSHd
      service:
        name: ssh
        state: restarted
    # Setting Timezone
    - name: Setting Timezone
      timezone:
        name: Asia/Tokyo
    # Setting NTP
    - name: Install NTP
      apt: name=ntp update_cache=yes
    - name: Setting NTP (1/2)
      replace:
        dest: /etc/ntp.conf
        regexp: '^pool'
        replace: '#pool'
        backup: true
    - name: Setting NTP (2/2)
      lineinfile:
        dest: /etc/ntp.conf
        insertafter: '^#pool'
        line: '{{item}}'
        backup: true
      with_items:
        - 'server ntp2.ring.gr.jp'
        - 'server ntp1.ring.gr.jp'
        - 'server ntp0.ring.gr.jp'
    - name: Restart NTPd
      service:
        name: ntp
        state: restarted
    # Install Docker CE
    - name: Install Docker (1/5)
      apt: name={{item}} update_cache=yes
      with_items:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg2
        - software-properties-common
    - name: Install Docker (2/5)
      shell: curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
    - name: Install Docker (3/5)
      shell: apt-key fingerprint 0EBFCD88
    - name: Install Docker (4/5)
      shell: add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
    - name: Install Docker (5/5)
      apt: name=docker-ce update_cache=yes
    # Install docker-compose
    - name: Install docker-compose (1/2)
      shell: curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
    - name: Install docker-compose (2/2)
      shell: chmod +x /usr/local/bin/docker-compose
